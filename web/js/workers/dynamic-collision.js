(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
/* entity worker */
// collisions btween entities in motion and other entities
"use strict";

var distance2d = function (a, b) {

  return Math.sqrt(Math.pow(a[0] - b[0], 2) + Math.pow(a[2] - b[2], 2));
},
    distance2dCompare = function (a, b, n) {
  // more efficient version of distance2d()

  return Math.pow(a[0] - b[0], 2) + Math.pow(a[2] - b[2], 2) < n * n;
},
    distance3dCompare = function (a, b, n) {
  // ..faster than using Math.sqrt()

  return Math.pow(a[0] - b[0], 2) + Math.pow(a[1] - b[1], 2) + Math.pow(a[2] - b[2], 2) < n * n;
};

var voxels = {},
    // map of string coordinates to arrays of entities
observer = {
  position: [0, 0, 0],
  prevPos: [0, 0, 0],
  velocity: [0, 0, 0],
  hands: [],
  vrHeight: 0
};

self.onmessage = function (event) {
  // probably going to replace most of this worker with Cannon.js.. & can fallback to static-collision worker in most cases

  var message = JSON.parse(event.data),
      data = message.data,
      entities = [],
      voxel = null,
      user = observer,
      c = 0;

  if (message.command == "set in motion") {} else if (message.command == "become static") {} else if (message.command == "add voxels") {

    data.map(function (voxel) {

      voxels[voxel.cell.join(".")] = voxel;
    });
  } else if (message.command == "remove voxels") {

    c = data.length - 1;

    while (c >= 0) {

      toRemove = data[c];
      voxels[toRemove.cell] = null;
      c--;
    }
  } else if (message.command == "add entity") {

    entities = voxels[data.coords.join(".")].entities;

    if (entities != null) {

      voxels[data.coords.join("x")].entities.push(data.entity);
    }
  } else if (message.command == "remove entity") {

    entities = voxels[data.coords.join(".")].entities;

    if (entities != null) {

      c = entities.length - 1;

      while (c >= 0) {

        if (entities[c].id == data.entityId) {

          voxels[data.coords.join(".")].entities.splice(c, 1);
          c = -1;
        }

        c--;
      }
    }
  } else if (message.command == "update entity") {

    entities = voxels[data.coords.join(".")].entities;

    if (entities != null) {

      c = entities.length - 1;

      while (c >= 0) {

        if (entities[c].id == data.entityId) {

          entities[c] = data.entity;
          c = -1;
        }

        c--;
      }
    }
  } else if (message.command == "update") {

    user.position = data.position;
    user.velocity = data.velocity;
    user.vrHeight = data.vrHeight;
  } else if (message.command == "start") {

    self.update();
  } else if (message.command == "stop") {

    self.stop();
  }
};

self.stop = function () {
  clearTimeout(self.updateLoop);
};

self.update = function () {

  var entities = [],
      user = observer,
      position = user.position,
      secondPos = null,
      coords = [Math.floor(position[0] / 928000), 0, Math.floor(position[2] / 807360)],
      key = "",
      obj = null,
      secondObj = null,
      x = -1,
      z = -1,
      i = 0,
      o = 0;

  while (x <= 2) {
    // only simulate entities in 9 voxels around the user

    while (z <= 2) {

      key = x + coords[0] + ".0." + (z + coords[2]);

      if (voxels[key] != null) {

        entities = voxels[key].entities;

        if (!!entities) {

          i = entities.length;

          while (i >= 0) {

            obj = entities[i];

            if (!!obj) {

              if (!!obj.moving) {
                //moving) {

                o = entities.length - 1; // if moving, check collisions against all other entities (in that voxel)

                while (o >= 0) {

                  secondObj = entities[o];
                  secondPos = secondObj.position;

                  if (distance3dCompare(secondPos, obj.position, obj.boundingRadius + secondObj.boundingRadius)) {
                    // look up the proper radius
                    // send back the new position and velocity for both entities
                    self.postMessage("{\"command\": \"entity-entity collision\", \"data\":{\"entities\":[{\"position\":[" + obj.position[0] + "," + obj.position[1] + "," + obj.position[2] + "],\"velocity\": [0, 0, 0] }, {\"position\":[" + secondPos[0] + "," + secondPos[1] + "," + secondPos[2] + "],\"velocity\": [0, 0, 0] }]}}");
                  }

                  o--;
                }
              }
            }

            i--;
          }
        }
      }

      ++z;
    }

    ++x;
  }

  self.postMessage("{\"command\": \"update\"}");
  self.updateLoop = setTimeout(function () {
    self.update();
  }, 15);
};

// implement

// implement

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJDOi9Db2RlL3NyYy9naXRodWIuY29tL1NwYWNlSGV4YWdvbi9jb252b2x2ci9jbGllbnQvc3JjL2pzL3dvcmtlcnMvZHluYW1pYy1jb2xsaXNpb25zLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7OztBQ0VBLElBQUksVUFBVSxHQUFHLFVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBTTs7QUFFekIsU0FBTyxJQUFJLENBQUMsSUFBSSxDQUFFLElBQUksQ0FBQyxHQUFHLENBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRyxDQUFDLENBQUUsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUcsQ0FBQyxDQUFFLENBQUUsQ0FBQTtDQUUzRTtJQUNELGlCQUFpQixHQUFHLFVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQU07OztBQUVsQyxTQUFPLElBQUksQ0FBQyxHQUFHLENBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRyxDQUFDLENBQUUsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUcsQ0FBQyxDQUFFLEdBQUksQ0FBQyxHQUFDLENBQUMsQUFBQyxDQUFBO0NBRXRFO0lBQ0QsaUJBQWlCLEdBQUcsVUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBTTs7O0FBRWxDLFNBQU8sQUFBQyxJQUFJLENBQUMsR0FBRyxDQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUcsQ0FBQyxDQUFFLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBRyxDQUFDLENBQUMsQ0FB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QyxNQUFNLEVBQUUsQ0FBQTtHQUNiLEVBQUUsRUFBRSxDQUFDLENBQUE7Q0FFTixDQUFBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSIsIi8qIGVudGl0eSB3b3JrZXIgKi9cclxuLy8gY29sbGlzaW9ucyBidHdlZW4gZW50aXRpZXMgaW4gbW90aW9uIGFuZCBvdGhlciBlbnRpdGllc1xyXG5sZXQgZGlzdGFuY2UyZCA9ICggYSwgYiApID0+IHtcclxuXHJcbiAgICByZXR1cm4gTWF0aC5zcXJ0KCBNYXRoLnBvdygoYVswXS1iWzBdKSwgMiApICsgTWF0aC5wb3coIChhWzJdLWJbMl0pLCAyICkgKVxyXG5cclxuICB9LFxyXG4gIGRpc3RhbmNlMmRDb21wYXJlID0gKCBhLCBiLCBuICkgPT4geyAvLyBtb3JlIGVmZmljaWVudCB2ZXJzaW9uIG9mIGRpc3RhbmNlMmQoKVxyXG5cclxuXHQgIHJldHVybiBNYXRoLnBvdyggKGFbMF0tYlswXSksIDIgKSArIE1hdGgucG93KCAoYVsyXS1iWzJdKSwgMiApIDwgKG4qbilcclxuXHJcbiAgfSxcclxuICBkaXN0YW5jZTNkQ29tcGFyZSA9ICggYSwgYiwgbiApID0+IHsgLy8gLi5mYXN0ZXIgdGhhbiB1c2luZyBNYXRoLnNxcnQoKVxyXG5cclxuXHQgIHJldHVybiAoTWF0aC5wb3coIChhWzBdLWJbMF0pLCAyICkgKyBNYXRoLnBvdyggKGFbMV0tYlsxXSksIDIgKSArIE1hdGgucG93KCAoYVsyXS1iWzJdKSwgMiApKSA8IChuKm4pXHJcblxyXG4gIH1cclxuXHJcbmxldCB2b3hlbHMgPSB7fSwgLy8gbWFwIG9mIHN0cmluZyBjb29yZGluYXRlcyB0byBhcnJheXMgb2YgZW50aXRpZXNcclxuICAgIG9ic2VydmVyID0ge1xyXG4gIFx0XHRwb3NpdGlvbjogWzAsIDAsIDBdLFxyXG4gIFx0XHRwcmV2UG9zOiBbMCwgMCwgMF0sXHJcbiAgXHRcdHZlbG9jaXR5OiBbMCwgMCwgMF0sXHJcbiAgICAgIGhhbmRzOiBbXSxcclxuICBcdFx0dnJIZWlnaHQ6IDBcclxuICBcdH1cclxuXHJcbnNlbGYub25tZXNzYWdlID0gZXZlbnQgPT4geyAvLyBwcm9iYWJseSBnb2luZyB0byByZXBsYWNlIG1vc3Qgb2YgdGhpcyB3b3JrZXIgd2l0aCBDYW5ub24uanMuLiAmIGNhbiBmYWxsYmFjayB0byBzdGF0aWMtY29sbGlzaW9uIHdvcmtlciBpbiBtb3N0IGNhc2VzIFxyXG5cclxuXHRsZXQgbWVzc2FnZSA9IEpTT04ucGFyc2UoZXZlbnQuZGF0YSksXHJcblx0XHRcdGRhdGEgPSBtZXNzYWdlLmRhdGEsXHJcbiAgICAgIGVudGl0aWVzID0gW10sXHJcbiAgICAgIHZveGVsID0gbnVsbCxcclxuICAgICAgdXNlciA9IG9ic2VydmVyLFxyXG5cdFx0XHRjID0gMFxyXG5cclxuICBpZiAoIG1lc3NhZ2UuY29tbWFuZCA9PSBcInNldCBpbiBtb3Rpb25cIiApIHtcclxuICAgIC8vIGltcGxlbWVudFxyXG5cclxuICB9IGVsc2UgaWYgKCBtZXNzYWdlLmNvbW1hbmQgPT0gXCJiZWNvbWUgc3RhdGljXCIgKSB7XHJcbiAgICAvLyBpbXBsZW1lbnRcclxuXHJcbiAgfSBlbHNlIGlmICggbWVzc2FnZS5jb21tYW5kID09IFwiYWRkIHZveGVsc1wiICkge1xyXG5cclxuICAgIGRhdGEubWFwKCB2b3hlbCA9PiB7XHJcblxyXG4gICAgICB2b3hlbHNbIHZveGVsLmNlbGwuam9pbihcIi5cIikgXSA9IHZveGVsXHJcblxyXG4gICAgfSlcclxuXHJcbiAgfSBlbHNlIGlmICggbWVzc2FnZS5jb21tYW5kID09IFwicmVtb3ZlIHZveGVsc1wiICkge1xyXG5cclxuICAgIGMgPSBkYXRhLmxlbmd0aCAtMVxyXG5cclxuXHRcdHdoaWxlICggYyA+PSAwICkge1xyXG5cclxuXHRcdFx0dG9SZW1vdmUgPSBkYXRhWyBjIF1cclxuXHRcdFx0dm94ZWxzWyB0b1JlbW92ZS5jZWxsIF0gPSBudWxsXHJcblx0XHRcdGMgLS1cclxuXHJcblx0XHR9XHJcblxyXG4gIH0gZWxzZSBpZiAoIG1lc3NhZ2UuY29tbWFuZCA9PSBcImFkZCBlbnRpdHlcIiApIHtcclxuXHJcbiAgICBlbnRpdGllcyA9IHZveGVsc1tkYXRhLmNvb3Jkcy5qb2luKFwiLlwiKV0uZW50aXRpZXNcclxuXHJcbiAgICBpZiAoZW50aXRpZXMgIT0gbnVsbCkge1xyXG5cclxuICAgICAgdm94ZWxzWyBkYXRhLmNvb3Jkcy5qb2luKFwieFwiKSBdLmVudGl0aWVzLnB1c2goZGF0YS5lbnRpdHkpXHJcblxyXG4gICAgfVxyXG5cclxuICB9IGVsc2UgaWYgKCBtZXNzYWdlLmNvbW1hbmQgPT0gXCJyZW1vdmUgZW50aXR5XCIgKSB7XHJcblxyXG4gICAgZW50aXRpZXMgPSB2b3hlbHNbZGF0YS5jb29yZHMuam9pbihcIi5cIildLmVudGl0aWVzXHJcblxyXG4gICAgaWYgKGVudGl0aWVzICE9IG51bGwpIHtcclxuXHJcbiAgICAgIGMgPSBlbnRpdGllcy5sZW5ndGgtMVxyXG5cclxuICBcdFx0d2hpbGUgKCBjID49IDAgKSB7XHJcblxyXG4gIFx0XHRcdGlmICggZW50aXRpZXNbIGMgXS5pZCA9PSBkYXRhLmVudGl0eUlkICkge1xyXG5cclxuICBcdFx0XHRcdHZveGVsc1tkYXRhLmNvb3Jkcy5qb2luKFwiLlwiKV0uZW50aXRpZXMuc3BsaWNlKCBjLCAxIClcclxuICAgICAgICAgIGMgPSAtMVxyXG5cclxuICAgICAgICB9XHJcblxyXG4gIFx0XHRcdGMtLVxyXG5cclxuICBcdFx0fVxyXG5cclxuICAgIH1cclxuXHJcbiAgfSBlbHNlIGlmICggbWVzc2FnZS5jb21tYW5kID09IFwidXBkYXRlIGVudGl0eVwiICkge1xyXG5cclxuXHRcdGVudGl0aWVzID0gdm94ZWxzWyBkYXRhLmNvb3Jkcy5qb2luKFwiLlwiKSBdLmVudGl0aWVzXHJcblxyXG5cdFx0aWYgKGVudGl0aWVzICE9IG51bGwpIHtcclxuXHJcblx0XHRcdGMgPSBlbnRpdGllcy5sZW5ndGgtMVxyXG5cclxuXHRcdFx0d2hpbGUgKCBjID49IDAgKSB7XHJcblxyXG5cdFx0XHRcdGlmIChlbnRpdGllc1sgYyBdLmlkID09IGRhdGEuZW50aXR5SWQpIHtcclxuXHJcblx0XHRcdFx0XHRlbnRpdGllc1sgYyBdID0gZGF0YS5lbnRpdHlcclxuXHRcdFx0XHRcdGMgPSAtMVxyXG5cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdGMtLVxyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH1cclxuXHJcblx0fSBlbHNlIGlmICggbWVzc2FnZS5jb21tYW5kID09IFwidXBkYXRlXCIgKSB7XHJcblxyXG4gICAgdXNlci5wb3NpdGlvbiA9IGRhdGEucG9zaXRpb25cclxuXHRcdHVzZXIudmVsb2NpdHkgPSBkYXRhLnZlbG9jaXR5XHJcblx0XHR1c2VyLnZySGVpZ2h0ID0gZGF0YS52ckhlaWdodFxyXG5cclxuICB9IGVsc2UgaWYgKCBtZXNzYWdlLmNvbW1hbmQgPT0gXCJzdGFydFwiICkge1xyXG5cclxuXHRcdHNlbGYudXBkYXRlKClcclxuXHJcblx0fSBlbHNlIGlmICggbWVzc2FnZS5jb21tYW5kID09IFwic3RvcFwiICkge1xyXG5cclxuXHRcdHNlbGYuc3RvcCgpXHJcblxyXG4gIH1cclxufTtcclxuXHJcbnNlbGYuc3RvcCA9ICgpID0+IHtcclxuXHRjbGVhclRpbWVvdXQoc2VsZi51cGRhdGVMb29wKTtcclxufVxyXG5cclxuc2VsZi51cGRhdGUgPSAoKSA9PiB7XHJcblxyXG4gIGxldCBlbnRpdGllcyA9IFtdLFxyXG4gICAgICB1c2VyID0gb2JzZXJ2ZXIsXHJcbiAgICAgIHBvc2l0aW9uID0gdXNlci5wb3NpdGlvbixcclxuICAgICAgc2Vjb25kUG9zID0gbnVsbCxcclxuICAgICAgY29vcmRzID0gW01hdGguZmxvb3IocG9zaXRpb25bMF0vOTI4MDAwKSwgMCwgTWF0aC5mbG9vcihwb3NpdGlvblsyXS84MDczNjApXSxcclxuICAgICAga2V5ID0gJycsXHJcbiAgICAgIG9iaiA9IG51bGwsXHJcbiAgICAgIHNlY29uZE9iaiA9IG51bGwsXHJcbiAgICAgIHggPSAtIDEsXHJcbiAgICAgIHogPSAtIDEsXHJcbiAgICAgIGkgPSAwLFxyXG4gICAgICBvID0gMFxyXG5cclxuICB3aGlsZSAoeCA8PSAyKSB7IC8vIG9ubHkgc2ltdWxhdGUgZW50aXRpZXMgaW4gOSB2b3hlbHMgYXJvdW5kIHRoZSB1c2VyXHJcblxyXG4gICAgd2hpbGUgKHogPD0gMikge1xyXG5cclxuICAgICAga2V5ID0gKHgrY29vcmRzWzBdKSsnLjAuJysoeitjb29yZHNbMl0pXHJcblxyXG4gICAgICBpZiAodm94ZWxzW2tleV0gIT0gbnVsbCkge1xyXG5cclxuICAgICAgICBlbnRpdGllcyA9IHZveGVsc1trZXldLmVudGl0aWVzXHJcblxyXG4gICAgICAgIGlmICghIWVudGl0aWVzKSB7XHJcblxyXG4gICAgICAgICAgaSA9IGVudGl0aWVzLmxlbmd0aFxyXG5cclxuICAgICAgICAgIHdoaWxlIChpID49IDApIHtcclxuXHJcbiAgICAgICAgICAgIG9iaiA9IGVudGl0aWVzW2ldXHJcblxyXG4gICAgICAgICAgICBpZiAoISFvYmopIHtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgaWYgKCEhIG9iai5tb3ZpbmcpIHsgLy9tb3ZpbmcpIHtcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgbyA9IGVudGl0aWVzLmxlbmd0aCAtMSAvLyBpZiBtb3ZpbmcsIGNoZWNrIGNvbGxpc2lvbnMgYWdhaW5zdCBhbGwgb3RoZXIgZW50aXRpZXMgKGluIHRoYXQgdm94ZWwpXHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIHdoaWxlIChvID49IDApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgIHNlY29uZE9iaiA9IGVudGl0aWVzW29dXHJcbiAgICAgICAgICAgICAgICAgIHNlY29uZFBvcyA9IHNlY29uZE9iai5wb3NpdGlvblxyXG5cclxuICAgICAgICAgICAgICAgICAgaWYgKGRpc3RhbmNlM2RDb21wYXJlKHNlY29uZFBvcywgb2JqLnBvc2l0aW9uLCBvYmouYm91bmRpbmdSYWRpdXMrc2Vjb25kT2JqLmJvdW5kaW5nUmFkaXVzKSkgeyAvLyBsb29rIHVwIHRoZSBwcm9wZXIgcmFkaXVzXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gc2VuZCBiYWNrIHRoZSBuZXcgcG9zaXRpb24gYW5kIHZlbG9jaXR5IGZvciBib3RoIGVudGl0aWVzXHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5wb3N0TWVzc2FnZSgne1wiY29tbWFuZFwiOiBcImVudGl0eS1lbnRpdHkgY29sbGlzaW9uXCIsIFwiZGF0YVwiOntcImVudGl0aWVzXCI6W3tcInBvc2l0aW9uXCI6Wycrb2JqLnBvc2l0aW9uWzBdICsgJywnICsgb2JqLnBvc2l0aW9uWzFdICsgJywnICsgb2JqLnBvc2l0aW9uWzJdICsgJ10sXCJ2ZWxvY2l0eVwiOiBbMCwgMCwgMF0gfSwge1wicG9zaXRpb25cIjpbJytzZWNvbmRQb3NbMF0gKyAnLCcgKyBzZWNvbmRQb3NbMV0gKyAnLCcgKyBzZWNvbmRQb3NbMl0gKyAnXSxcInZlbG9jaXR5XCI6IFswLCAwLCAwXSB9XX19JylcclxuXHJcbiAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgIG8gLS1cclxuXHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGkgLS1cclxuXHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgIH1cclxuXHJcbiAgICAgICsrIHpcclxuXHJcbiAgICB9XHJcblxyXG4gICAgKysgeFxyXG5cclxuICB9XHJcblxyXG4gIHNlbGYucG9zdE1lc3NhZ2UoJ3tcImNvbW1hbmRcIjogXCJ1cGRhdGVcIn0nKVxyXG5cdHNlbGYudXBkYXRlTG9vcCA9IHNldFRpbWVvdXQoICgpID0+IHtcclxuXHRcdHNlbGYudXBkYXRlKClcclxuXHR9LCAxNSlcclxuXHJcbn1cclxuIl19
