(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
/* entity worker */
// collisions btween entities in motion and other entities
"use strict";

var distance2d = function (a, b) {

  return Math.sqrt(Math.pow(a[0] - b[0], 2) + Math.pow(a[2] - b[2], 2));
},
    distance2dCompare = function (a, b, n) {
  // more efficient version of distance2d()

  return Math.pow(a[0] - b[0], 2) + Math.pow(a[2] - b[2], 2) < n * n;
},
    distance3dCompare = function (a, b, n) {
  // ..faster than using Math.sqrt()

  return Math.pow(a[0] - b[0], 2) + Math.pow(a[1] - b[1], 2) + Math.pow(a[2] - b[2], 2) < n * n;
};

var voxels = {},
    // map of string coordinates to arrays of entities
observer = {
  position: [0, 0, 0],
  prevPos: [0, 0, 0],
  velocity: [0, 0, 0],
  hands: [],
  vrHeight: 0
};

self.onmessage = function (event) {
  // Do some work.
  var message = JSON.parse(event.data),
      data = message.data,
      entities = [],
      voxel = null,
      user = observer,
      c = 0;

  if (message.command == "set in motion") {} else if (message.command == "become static") {} else if (message.command == "add voxels") {

    data.map(function (voxel) {

      voxels[voxel.cell.join(".")] = voxel;
    });
  } else if (message.command == "remove voxels") {

    p = data.length - 1;

    while (p >= 0) {

      toRemove = data[p];
      voxels[toRemove.cell] = null;
      p--;
    }
  } else if (message.command == "add entity") {

    entities = voxels[data.coords.join(".")].entities;

    if (entities != null) {

      voxels[data.coords.join("x")].entities.push(data.entity);
    }
  } else if (message.command == "remove entity") {

    entities = voxels[data.coords.join(".")].entities;

    if (entities != null) {

      c = entities.length - 1;

      while (c >= 0) {

        if (entities[c].id == data.entityId) {

          voxels[data.coords.join(".")].entities.splice(c, 1);
          c = -1;
        }

        c--;
      }
    }
  } else if (message.command == "update") {

    user.position = data.position;
    user.velocity = data.velocity;
    user.vrHeight = data.vrHeight;
  } else if (message.command == "start") {

    self.update();
  } else if (message.command == "stop") {

    self.stop();
  }
};

self.stop = function () {
  clearTimeout(self.updateLoop);
};

self.update = function () {

  var entities = [],
      user = observer,
      position = user.position,
      secondPos = null,
      coords = [Math.floor(position[0] / 928000), 0, Math.floor(position[2] / 807360)],
      key = "",
      obj = null,
      secondObj = null,
      x = -1,
      z = -1,
      i = 0,
      o = 0;

  while (x <= 2) {
    // only simulate entities in 9 voxels around the user

    while (z <= 2) {

      key = x + coords[0] + ".0." + (z + coords[2]);

      if (voxels[key] != null) {

        entities = voxels[key].entities;

        if (!!entities) {

          i = entities.length;

          while (i >= 0) {

            obj = entities[i];

            if (!!obj) {

              if (!!obj.moving) {
                //moving) {

                o = entities.length - 1; // if moving, check collisions against all other entities (in that voxel)

                while (o >= 0) {

                  secondObj = entities[o];
                  secondPos = secondObj.position;

                  if (distance3dCompare(secondPos, obj.position, obj.boundingRadius + secondObj.boundingRadius)) {
                    // look up the proper radius
                    // send back the new position and velocity for both entities
                    self.postMessage("{\"command\": \"entity-entity collision\", \"data\":{\"entities\":[{\"position\":[" + obj.position[0] + "," + obj.position[1] + "," + obj.position[2] + "],\"velocity\": [0, 0, 0] }, {\"position\":[" + secondPos[0] + "," + secondPos[1] + "," + secondPos[2] + "],\"velocity\": [0, 0, 0] }]}}");
                  }

                  o--;
                }
              }
            }

            i--;
          }
        }
      }

      ++z;
    }

    ++x;
  }

  self.postMessage("{\"command\": \"update\"}");
  self.updateLoop = setTimeout(function () {
    self.update();
  }, 15);
};

// implement

// implement

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
